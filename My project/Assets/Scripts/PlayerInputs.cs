//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3d35295a-64b8-4620-b5cb-c24965082915"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4d0d5c4f-e9a4-4692-b6f7-e23574003422"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b475697a-aceb-448b-b159-03b8a2977ae2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""f4163cd9-60a6-4d25-9260-31df9eeca967"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Speed Change"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bb6a721c-74e2-41fd-a477-f46a2a4caee3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9008334a-da23-4dc0-9392-befa38a89846"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""03842696-65eb-458f-95de-2c406ed57c0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7d0a4887-14f8-47cb-8937-beb8508abed7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""79b9433c-ad25-42e3-a9f6-5b68429722c2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4e75b5d2-a5b4-4e7c-ae2b-ac8e8dfdb979"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9bf11ed8-4347-490f-a3d9-bf9a0df4b3bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b611c1eb-5f60-4fe2-b7a9-65e6753cde13"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a0ef8004-ba18-4695-8b64-f159cc076496"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd2d817b-6fe5-4259-90a5-60e734b910ac"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bf31a70-3ed6-4105-9d25-119ff10b18ad"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Speed Change"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c72c6af3-6d3d-47b1-8de8-1d77bbeef503"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65ba2d67-3db0-4d1b-b951-ff46f649e8d2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keys"",
            ""id"": ""c8adabd3-057d-4e3c-89c9-e06c18421020"",
            ""actions"": [
                {
                    ""name"": ""R"",
                    ""type"": ""Button"",
                    ""id"": ""aa968de0-2e9f-4012-bcef-5cccc5baadfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""T"",
                    ""type"": ""Button"",
                    ""id"": ""656676e7-5558-4c4e-a3fe-0405535e8775"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ALT"",
                    ""type"": ""Button"",
                    ""id"": ""0ce6f6fe-cdd3-41ec-bd80-d0e82b7a0394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SHIFT"",
                    ""type"": ""Button"",
                    ""id"": ""c204ec4b-572e-4c30-9bec-78e078701a6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CONTROL"",
                    ""type"": ""Button"",
                    ""id"": ""4d49ec99-116f-4f2a-bb4c-fe580ec8c7ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""081d3e62-ec96-40ad-8cc9-36d73003987d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60ee19d2-cfa7-4bc8-b192-b32515daf054"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""T"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e72f4fae-b4b5-4de1-a944-2c0770d4fee2"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ALT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ac280ba-b68d-45a6-a447-44dfe33408c8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SHIFT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""091099d4-4b76-40a1-8a2f-ec6b4a44c8c1"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CONTROL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Walking = m_Player.FindAction("Walking", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_MoveSpeedChange = m_Player.FindAction("Move Speed Change", throwIfNotFound: true);
        m_Player_Mouse = m_Player.FindAction("Mouse", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        // Keys
        m_Keys = asset.FindActionMap("Keys", throwIfNotFound: true);
        m_Keys_R = m_Keys.FindAction("R", throwIfNotFound: true);
        m_Keys_T = m_Keys.FindAction("T", throwIfNotFound: true);
        m_Keys_ALT = m_Keys.FindAction("ALT", throwIfNotFound: true);
        m_Keys_SHIFT = m_Keys.FindAction("SHIFT", throwIfNotFound: true);
        m_Keys_CONTROL = m_Keys.FindAction("CONTROL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Walking;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_MoveSpeedChange;
    private readonly InputAction m_Player_Mouse;
    private readonly InputAction m_Player_Jump;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_Player_Walking;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @MoveSpeedChange => m_Wrapper.m_Player_MoveSpeedChange;
        public InputAction @Mouse => m_Wrapper.m_Player_Mouse;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Walking.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalking;
                @Walking.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalking;
                @Walking.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWalking;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Crouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @MoveSpeedChange.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveSpeedChange;
                @MoveSpeedChange.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveSpeedChange;
                @MoveSpeedChange.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMoveSpeedChange;
                @Mouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouse;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walking.started += instance.OnWalking;
                @Walking.performed += instance.OnWalking;
                @Walking.canceled += instance.OnWalking;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @MoveSpeedChange.started += instance.OnMoveSpeedChange;
                @MoveSpeedChange.performed += instance.OnMoveSpeedChange;
                @MoveSpeedChange.canceled += instance.OnMoveSpeedChange;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Keys
    private readonly InputActionMap m_Keys;
    private IKeysActions m_KeysActionsCallbackInterface;
    private readonly InputAction m_Keys_R;
    private readonly InputAction m_Keys_T;
    private readonly InputAction m_Keys_ALT;
    private readonly InputAction m_Keys_SHIFT;
    private readonly InputAction m_Keys_CONTROL;
    public struct KeysActions
    {
        private @PlayerInputs m_Wrapper;
        public KeysActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @R => m_Wrapper.m_Keys_R;
        public InputAction @T => m_Wrapper.m_Keys_T;
        public InputAction @ALT => m_Wrapper.m_Keys_ALT;
        public InputAction @SHIFT => m_Wrapper.m_Keys_SHIFT;
        public InputAction @CONTROL => m_Wrapper.m_Keys_CONTROL;
        public InputActionMap Get() { return m_Wrapper.m_Keys; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeysActions set) { return set.Get(); }
        public void SetCallbacks(IKeysActions instance)
        {
            if (m_Wrapper.m_KeysActionsCallbackInterface != null)
            {
                @R.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @R.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @R.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnR;
                @T.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @T.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @T.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnT;
                @ALT.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnALT;
                @ALT.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnALT;
                @ALT.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnALT;
                @SHIFT.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnSHIFT;
                @SHIFT.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnSHIFT;
                @SHIFT.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnSHIFT;
                @CONTROL.started -= m_Wrapper.m_KeysActionsCallbackInterface.OnCONTROL;
                @CONTROL.performed -= m_Wrapper.m_KeysActionsCallbackInterface.OnCONTROL;
                @CONTROL.canceled -= m_Wrapper.m_KeysActionsCallbackInterface.OnCONTROL;
            }
            m_Wrapper.m_KeysActionsCallbackInterface = instance;
            if (instance != null)
            {
                @R.started += instance.OnR;
                @R.performed += instance.OnR;
                @R.canceled += instance.OnR;
                @T.started += instance.OnT;
                @T.performed += instance.OnT;
                @T.canceled += instance.OnT;
                @ALT.started += instance.OnALT;
                @ALT.performed += instance.OnALT;
                @ALT.canceled += instance.OnALT;
                @SHIFT.started += instance.OnSHIFT;
                @SHIFT.performed += instance.OnSHIFT;
                @SHIFT.canceled += instance.OnSHIFT;
                @CONTROL.started += instance.OnCONTROL;
                @CONTROL.performed += instance.OnCONTROL;
                @CONTROL.canceled += instance.OnCONTROL;
            }
        }
    }
    public KeysActions @Keys => new KeysActions(this);
    public interface IPlayerActions
    {
        void OnWalking(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnMoveSpeedChange(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IKeysActions
    {
        void OnR(InputAction.CallbackContext context);
        void OnT(InputAction.CallbackContext context);
        void OnALT(InputAction.CallbackContext context);
        void OnSHIFT(InputAction.CallbackContext context);
        void OnCONTROL(InputAction.CallbackContext context);
    }
}
